from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription, SetEnvironmentVariable, TimerAction, LogInfo, OpaqueFunction, GroupAction
from launch.substitutions import Command, LaunchConfiguration, PathJoinSubstitution, PythonExpression
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare
from launch.launch_description_sources import PythonLaunchDescriptionSource
from ament_index_python.packages import get_package_share_directory, get_package_prefix
import os
from launch.conditions import IfCondition
from launch_ros.parameter_descriptions import ParameterValue
from pathlib import Path


def generate_launch_description(): 


    description_dir = get_package_share_directory("deliverybot_description")
    bringup_dir = get_package_share_directory("deliverybot_bringup")


   #Arguments ========================================================

    use_sim_time_arg = DeclareLaunchArgument(
        name="use_sim_time",
        default_value="false",
        description="simulation time. true if inputs are generated by gazebo"
    )

    # Declare launch arguments for robot spawn position
    x_pose_arg = DeclareLaunchArgument(
        name="x_pose",
        default_value="0.0",
        description="X position of the robot"
    )

    y_pose_arg = DeclareLaunchArgument(
        name="y_pose",
        default_value="0.0",
        description="Y position of the robot"
    )

    z_pose_arg = DeclareLaunchArgument(
        name="z_pose",
        default_value="0.0",
        description="Z position of the robot"
    )

    gazebo_version_arg = DeclareLaunchArgument(
        name='gazebo_version',
        default_value='classic',
        description='Gazebo flavor to use: [classic|ignition|gz]'
    )   

    model_arg =  DeclareLaunchArgument(
        name="model",
        default_value=os.path.join(description_dir, "urdf", "deliverybot.urdf.xacro"),
        description="Absolute path to robot urdf file"
    )

    world_name_arg = DeclareLaunchArgument(
        name="world_name",
        default_value="empty",
        description="World file name"
    )


    #LaunchConfigurations ==============================================

    use_sim_time = LaunchConfiguration("use_sim_time")
    gazebo_version = LaunchConfiguration("gazebo_version")
    ros_distro = os.environ["ROS_DISTRO"]

    ros_distro_logging = LogInfo(msg=["****** ROS DISTRO: ", ros_distro])
    gazebo_version_logging = LogInfo(msg=["****** Launching GAZEBO VERSION: ", gazebo_version])
    

    gazebo_classic_dir = get_package_share_directory("gazebo_ros")
    world_name = LaunchConfiguration("world_name")

    x_pose = LaunchConfiguration("x_pose")
    y_pose = LaunchConfiguration("y_pose")
    z_pose = LaunchConfiguration("z_pose")
   

    gazebo_resource_path = SetEnvironmentVariable(
        name="GZ_SIM_RESOURCE_PATH",
        value=[
            str(Path(description_dir).parent.resolve())
            ]
        )
    
    world_path = PathJoinSubstitution([
        bringup_dir,
        "worlds",
        PythonExpression(["'", LaunchConfiguration("world_name"), "'", " + '.world'"])
    ])


    #LAUNCH 

    #GAZEBO CLASSIC ========================================================================

    is_classic = IfCondition(PythonExpression(["'", gazebo_version, "' == 'classic'"]))

    # Group them all in one go
    classic_group = GroupAction(
        condition=is_classic,
        actions=[

            # Gazebo Classic server
            IncludeLaunchDescription(
                PythonLaunchDescriptionSource(
                    os.path.join(gazebo_classic_dir, "launch", "gzserver.launch.py")
                ),
                launch_arguments={
                    "world": "empty.world",
                    "use_sim_time": use_sim_time
                }.items()
            ),

            # Gazebo Classic client
            IncludeLaunchDescription(
                PythonLaunchDescriptionSource(
                    os.path.join(gazebo_classic_dir, "launch", "gzclient.launch.py")
                ),
                launch_arguments={
                    "use_sim_time": use_sim_time,
                    "extra_gz_args": "--render-fps 10"
                }.items()
            ),

            # Spawn robot
            Node(
                package="gazebo_ros",
                executable="spawn_entity.py",
                arguments=[
                    "-entity", "deliverybot_sim",
                    "-topic", "robot_description",
                    "-x", x_pose,
                    "-y", y_pose,
                    "-z", z_pose,
                ],
                output="screen",
                parameters=[{'use_sim_time': use_sim_time}]
            )
        ],
    )

    #GAZEBO IGNITION ============================================================================

    is_ignition = IfCondition(PythonExpression(["'", gazebo_version, "' == 'ignition'"]))

    ignition_group = GroupAction(
        condition=is_ignition,
        actions=[
            
            #Gazebo ignition sim
            IncludeLaunchDescription(
                PythonLaunchDescriptionSource([os.path.join(
                    get_package_share_directory("ros_gz_sim"), "launch/"), "gz_sim.launch.py"]),
                launch_arguments=[
                    ("gz_args", [" -v 4", " -r", " empty.sdf"]) #mettere world name
                    ],
             ),

            #Spawn robot
            Node(
                package="ros_gz_sim",
                executable="create",
                output="screen",
                arguments=["-topic", "robot_description",
                            "-name", "deliverybot_sim",
                            "-allow_renaming", "true"],

            ),

            #Gz ros2 bridge
            Node(
                package="ros_gz_bridge",
                executable="parameter_bridge",
                output = "screen",
                parameters=[os.path.join(bringup_dir, "config", "ros_gz_bridge.yaml")],
                arguments=[
                    
                    "/odom" + "@nav_msgs/msg/Odometry" + "[ignition.msgs.Odometry",
                    "/clock" + "@rosgraph_msgs/msg/Clock" + "[ignition.msgs.Clock",
                    "/imu" + "@sensor_msgs/msg/Imu" + "[ignition.msgs.IMU",
                    "/lidar_front_left/scan"  + "@sensor_msgs/msg/LaserScan" + "[ignition.msgs.LaserScan",
                    "/lidar_front_right/scan"  + "@sensor_msgs/msg/LaserScan" + "[ignition.msgs.LaserScan",
                    "/lidar_rear_left/scan"  + "@sensor_msgs/msg/LaserScan" + "[ignition.msgs.LaserScan",
                    "/lidar_rear_right/scan"  + "@sensor_msgs/msg/LaserScan" + "[ignition.msgs.LaserScan",
                    "/depth_camera/image" + "@sensor_msgs/msg/Image" + "[ignition.msgs.Image",
                    "/depth_camera/points" + "@sensor_msgs/msg/PointCloud2" + "[ignition.msgs.PointCloudPacked",
                ],
                remappings=[
                    ("/odom", "/odom"),
                    ('/imu', '/imu/out'),
                    ("/depth_camera/image", "/depth_camera/image_raw"),
                    ("/depth_camera/points", "/depth_camera/points")]
                )
            ]
        )
    
    #GAZEBO GZ ============================================================================

    is_gz = IfCondition(PythonExpression(["'", gazebo_version, "' == 'gz'"]))

    gz_group = GroupAction(
        condition=is_gz,
        actions=[
            
            #Gazebo ignition sim
            IncludeLaunchDescription(
                PythonLaunchDescriptionSource([os.path.join(
                    get_package_share_directory("ros_gz_sim"), "launch/"), "gz_sim.launch.py"]),
                launch_arguments=[
                    ("gz_args", [" -v 4", " -r", " empty.sdf"]) #mettere world name
                    ],
             ),

            #Spawn robot
            Node(
                package="ros_gz_sim",
                executable="create",
                output="screen",
                arguments=["-topic", "robot_description",
                            "-name", "deliverybot_sim"],

            ),

            #Gz ros2 bridge
            Node(
            package="ros_gz_bridge",
            executable="parameter_bridge",
            parameters=[os.path.join(bringup_dir, "config", "ros_gz_bridge.yaml")],
            arguments=[
                "/odom" + "@nav_msgs/msg/Odometry" + "[gz.msgs.Odometry",
                "/clock" + "@rosgraph_msgs/msg/Clock" + "[gz.msgs.Clock",
                "/imu" + "@sensor_msgs/msg/Imu" + "[gz.msgs.IMU",
                "/rgb_camera/image_raw" + "@sensor_msgs/msg/Image" + "[gz.msgs.Image",
                "/scan" + "@sensor_msgs/msg/LaserScan" + "[gz.msgs.LaserScan",
                "/depth_camera/image" + "@sensor_msgs/msg/Image" + "[gz.msgs.Image",
                "/depth_camera/points" + "@sensor_msgs/msg/PointCloud2" + "[gz.msgs.PointCloudPacked",
            ],
            remappings=[
                ("/odom", "/odom"),
                ('/imu', '/imu/out'),
                ("/depth_camera/image", "/depth_camera/image_raw"),
                ("/depth_camera/points", "/depth_camera/points")]
                )
            ]
        )
    


    return LaunchDescription([
        use_sim_time_arg,
        model_arg,
        world_name_arg,
        gazebo_version_arg,

        x_pose_arg, 
        y_pose_arg,
        z_pose_arg, 

        gazebo_resource_path,
        ros_distro_logging,
        gazebo_version_logging,

        #Gazebo classic
        classic_group,

        #Gazebo Ignition,
        ignition_group,

        #Gazebo gz
        gz_group

    ])